#!/bin/sh
# shellcheck disable=2034
coded_by='

In the name of Allah, the most Gracious, the most Merciful.

 ▓▓▓▓▓▓▓▓▓▓
░▓ Author ▓ Abdullah <https://abdullah.today>
░▓▓▓▓▓▓▓▓▓▓ YouTube <https://YouTube.com/AbdullahToday>
░░░░░░░░░░

░█▄█░█░█░░░░░█▀█░█▀█░█▀█░█▀▀░█░░
░█░█░░█░░░░░░█▀▀░█▀█░█░█░█▀▀░█░░
░▀░▀░░▀░░▀▀▀░▀░░░▀░▀░▀░▀░▀▀▀░▀▀▀
'
COLOR_DEFAULT_FG="#FFA7A5A5"
COLOR_TRANSPARENT="#FF000000"
# COLOR_DEFAULT_FG="#FF000000"
COLOR_DEFAULT_BG="#AAFFFFFF"
COLOR_MONITOR_FG="#FF8DBCDF"
COLOR_MONITOR_BG="#AA333232"
COLOR_FOCUSED_MONITOR_FG="#FFB1D0E8"
COLOR_FOCUSED_MONITOR_BG="#AA144B6C"
COLOR_FREE_FG="#FFA7A5A5"
COLOR_FREE_BG="#AA000000"
COLOR_FOCUSED_FREE_FG="#FFE9967A"
COLOR_FOCUSED_FREE_BG="#AA000000"
COLOR_OCCUPIED_FG="#FFA0522D"
COLOR_OCCUPIED_BG="#AA000000"
COLOR_FOCUSED_OCCUPIED_FG="#FF006400"
COLOR_FOCUSED_OCCUPIED_BG="#AA000000"
COLOR_URGENT_FG="#FFF15D66"
COLOR_URGENT_BG="#AA333232"
COLOR_FOCUSED_URGENT_FG="#FF501D1f"
COLOR_FOCUSED_URGENT_BG="#AAD5443E"
COLOR_STATE_FG="#FFA7A5A5"
COLOR_STATE_BG="#AA000000"
COLOR_TITLE_FG="#FFA8A2C0"
COLOR_TITLE_BG="#AA333232"
COLOR_SYS_FG="#FFA7A5A5"
COLOR_SYS_BG="#AA000000"
COLOR_RED="#FF0000"
num_mon=$(bspc query -M | wc -l)
PANEL_FIFO=/tmp/panel-fifo
PANEL_HEIGHT=20
# PANEL_FONT="-bitstream-terminal-medium-r-normal--18-140-100-100-c-110-iso8859-1"
PANEL_FONT="-xos4-terminus-bold-r-normal--18-180-72-72-c-100-iso10646-1"
# PANEL_FONT="-bitstream-charter-medium-r-normal--19-140-100-100-p-106-iso8859-1"
# ICONS_FONT="-misc-font awesome 6 free regular-medium-r-normal--0-0-0-0-p-0-iso10646-1"
# ICONS_FONT="-misc-font awesome 6 free solid-black-r-normal--0-0-0-0-p-0-iso10646-1"
ICONS_FONT="PowerlineSymbols-20"
ICONS_FONT_2="FontAwesome-20"
PANEL_WM_NAME=bspwm_panel
left_corner="%{F#FF28DECB}%{F-}%{B-}"
right_corner="%{F#FF28DECB}%{F-}%{B-}"

if xdo id -a "$PANEL_WM_NAME" > /dev/null ; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"
modules_bg="B#AAFFFFFF"
modules_fg="F#FF000000"
datetime() {
    echo -n "%{$modules_fg}%{$modules_bg}$(date "+%a %-d %b %H:%M:%S")%{F-}%{B-}"
}

brightness() {
    echo -n "%{F#FFFA58F4}%{B#AA000000}BR:%{F-}%{B-}%{F#FF28DECB}%{B#AA000000}$(light -G | cut -d . -f 1)% %{F-}%{B-}"
}

cpu() {
    cpu=$(ps -eo pcpu | awk 'BEGIN {sum=0.0f} {sum+=$1} END {print sum}')
    temperature=$(($(cat /sys/class/thermal/thermal_zone0/temp) / 1000))°c
    echo -n "%{F#FFFFF042}%{B#AA000000}CPU:$cpu %{F-}%{B-}%{F#FF00FFFF}%{B#AA000000}$temperature%{F-}%{B-}"
}

wifi(){
    ssid="$(iw dev wlan0 link | awk -F: '/SSID/ {print $NF}')"
    if [ -z "${ssid}" ]; then
        # Do nothing
        :
    else
        echo -n "%{F#FFF10CF1}%{B#AA000000}$ssid%{F-}%{B-}"
    fi
}

battery() {
    sysfs="/sys/class/power_supply"
    _battery="BAT0"
    mains="AC"
    power_now="$(cat $sysfs/$_battery/power_now)"
    energy_now="$(cat $sysfs/$_battery/energy_now)"
    energy_full="$(cat $sysfs/$_battery/energy_full)"
    ac_on="$(cat $sysfs/$mains/online)"
    is_charger_connected="$(cat /sys/class/power_supply/AC/online)"
    if [ $is_charger_connected = 0 ]; then
        echo -n "%{F#FFFF0000}%{B#AA000000}Discharging:%{F-}%{B-}"
    elif [ $is_charger_connected = 1 ]; then
        echo -n "%{F#FF00FF00}%{B#AA000000}Charging:%{F-}%{B-}"
    else
        echo -n "%{F#FF0000FF}%{B#AA000000}AC:%{F-}%{B-}"
    fi

    battery_percentage="$(cat /sys/class/power_supply/BAT0/capacity)"
    if [ $battery_percentage -gt 60 ]; then
        echo -n "%{F#FF00FF00}%{B#AA000000}$battery_percentage%% %{F-}%{B-}"
    elif [ $battery_percentage -gt 30 ]; then
        echo -n "%{F#FFFFFF00}%{B#AA000000}$battery_percentage%% %{F-}%{B-}"
    elif [ $battery_percentage -lt 30 ] && [ "${is_charger_connected}" -ne 1 ] ; then
        notify-send -u critical -t 30000 "Battery critically low!"
        echo -n "%{F#FFFF3361}%{B#AA000000}$battery_percentage%% %{F-}%{B-}"
    else
        echo -n "%{F#FFFF0000}%{B#AA000000}$battery_percentage%% %{F-}%{B-}"
    fi

    if [ "${ac_on}" -ne 0 ]; then
        if [ "${power_now}" -ne 0 ] ; then
            remaining_time=$(( (energy_full - energy_now) * 60 / power_now ))
        else
            remaining_time="?"
        fi
    else
        if [ "${power_now}" -ne 0 ] ; then
            remaining_time="$(( energy_now * 60 / power_now ))"
        else
            remaining_time="?"
        fi
    fi

    echo -n "%{F#FF9D10A4}%{B#AA000000}$remaining_time mins"
}

spotify_music()
{
    if ! pgrep -x spotify >/dev/null; 
    then
        # do nothing
        exit
    else
        cmd="org.freedesktop.DBus.Properties.Get"
        domain="org.mpris.MediaPlayer2"
        path="/org/mpris/MediaPlayer2"
        meta=$(dbus-send --print-reply --dest=${domain}.spotify /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:${domain}.Player string:Metadata)
        artist=$(echo "$meta" | sed -nr '/xesam:artist"/,+2s/^ +string "(.*)"$/\1/p' | tail -1)
        album=$(echo "$meta" | sed -nr '/xesam:album"/,+2s/^ +variant +string "(.*)"$/\1/p' | tail -1)
        title=$(echo "$meta" | sed -nr '/xesam:title"/,+2s/^ +variant +string "(.*)"$/\1/p' | tail -1)
    fi

    echo -n "${*:-%artist% %title%}" | sed "s/%artist%/%{F#FF00FFFF}%{B#AA000000}$artist/g;s/%title%/%{F#FFDAA520}%{B#AA000000}$title/g;s/%album%/$album/g"i | sed 's/&/\\&/g'

}

volume(){
    current_volume="$(pamixer --get-volume)"
    is_muted="$(pamixer --get-volume-human)"
    if [ "${is_muted}" = "muted" ] ; then
        vol="muted"
    else
        vol="$current_volume"
    fi

    echo -n "%{A:pamixer -t:}%{F#FF5E81AC}%{B#AA000000}Vol:$vol%{A}%{F-}%{B-}"
}

mails() {
    count=$(find $HOME/.mail/Inbox/new -type f -print | wc -l)
    if [ $count -ne 0 ]; then
#         printf '%%{F#FFFF0000}%%{BAA#000000}Mails:%d%%{F-}%%{B-}' $count
#         echo -n "{F#FFFF0000}%{B#AA000000}Mails:$count %{F-}%{B-}"
        echo -n "%{F#FFFF0000}%{B#AA000000}Mails:$count %{F-}%{B-}"
    fi
}

ram(){
    used_ram="$(free | awk '/Mem:/ {print int($3/$2 * 100.0)}')%"
    echo -n "%{F#FFB443F3}%{B#AA000000}RAM:$used_ram %{F-}%{B-}"
}

music() {
    stat=$(cmus-remote -Q 2>/dev/null | awk '/status/{print $2}')
    if [ -z $stat ]; then
        # do nothing
        :
    elif [ $stat = 'paused' ]; then
        # do nothing
        :
    elif [ $stat = 'playing' ]; then
        artist=$(cmus-remote -C status | grep 'tag\ artist' | cut -d ' ' -f 3-)
        title=$(cmus-remote -C status | grep 'tag\ title' | cut -d ' ' -f 3-)
        full_time=$(cmus-remote -C status | awk '/duration/{print $2}')
        now_time=$(cmus-remote -C status | awk '/position/{print $2}')
        hours=$(($full_time / 3600))
        now_hours=$(($now_time / 3600))
        minutes=$(($full_time % 3600))
        now_minutes=$(($now_time % 3600))
        test $hours -gt 0 && dur="$hours:"
        test $now_hours -gt 0 && now_dur="$now_hours:"
        duration="$dur$(printf '%02d:%02d' $(($minutes / 60)) $(($minutes % 60)))"
        position="$now_dur$(printf '%02d:%02d' $(($now_minutes / 60)) $(($now_minutes % 60)))"
        echo -n "%{F#FF00ffff}%{B#AA000000}$artist - %{F#FFdaa520}%{B#AA000000}$title %{F#FFFF69B4}❤️ %{B#AA000000}%{F#FFff00dd}%{B#AA000000}$position/$duration"
    fi
}

mpd_music(){
    stat=$(mpc | awk 'NR==2{print $1}')
    if [ -z $stat ] || [ $stat = '[paused]' ]; then
        # do nothing
        :
    elif [ $stat = '[playing]' ]; then
        artist_and_album=$(mpc current)
        position=$(mpc | awk 'NR==2{print $3}')
        echo -n "%{F#FF00ffff}%{B#2F343F}$artist_and_album %{F#FFFF69B4}❤️ %{B#AA000000}%{F#FFdaa520}%{B#AA000000}$position"
    fi
}

all_info() {
    while true; do
        echo "B" "$(battery)"
        echo "G" "$(wifi)"
        echo "H" "$(datetime)"
        echo "C" "$(brightness)"
        echo "Y" "$(cpu)"
        echo "N" "$(mails)"
        echo "Z" "$(music)"
        echo "R" "$(ram)"
        echo "V" "$(volume)"
        echo "S" "$(spotify_music)"
        echo "P" "$(mpd_music)"
        sleep 1
    done
}

all_info > "$PANEL_FIFO" &
bspc subscribe report > "$PANEL_FIFO" &


my_panel() {

    while read -r line ; do
    	case $line in
            B*)
                battery="${line#?}"
                ;;
            C*)
                brightness="${line#?}"
                ;;
            H*)
                date="${line#?}"
                ;;
            G*)
                wifi="${line#?}"
                ;;
            Y*)
                cpu="${line#?}"
                ;;
            N*)
                mails="${line#?}"
                ;;
            Z*)
                music="${line#?}"
                ;;
            R*)
                ram="${line#?}"
                ;;
            V*)
                volume="${line#?}"
                ;;
            S*)
                spotify_music="${line#?}"
                ;;
            P*)
                mpd_music="${line#?}"
                ;;
	    W*)
	       # bspwm's state
			wm=
			IFS=':'
			set -- ${line#?}
			while [ $# -gt 0 ] ; do
				item=$1
				name=${item#?}
				case $item in
					[mM]*)
						case $item in
							m*)
								# monitor
								FG=$COLOR_MONITOR_FG
								BG=$COLOR_MONITOR_BG
								on_focused_monitor=
								;;
							M*)
								# focused monitor
								FG=$COLOR_FOCUSED_MONITOR_FG
								BG=$COLOR_FOCUSED_MONITOR_BG
								on_focused_monitor=1
								;;
						esac
						[ $num_mon -lt 2 ] && shift && continue
						wm="${wm}%{F${FG}}%{B${BG}}%{A:bspc monitor -f ${name}:} ${name} %{A}%{B-}%{F-}"
						;;
					[fFoOuU]*)
						case $item in
							f*)
								# free desktop
								FG=$COLOR_FREE_FG
								BG=$COLOR_FREE_BG
								UL=$BG
								;;
							F*)
								if [ "$on_focused_monitor" ] ; then
									# focused free desktop
									FG=$COLOR_FOCUSED_FREE_FG
									BG=$COLOR_FOCUSED_FREE_BG
									UL=$BG
								else
									# active free desktop
									FG=$COLOR_FREE_FG
									BG=$COLOR_FREE_BG
									UL=$COLOR_FOCUSED_FREE_BG
								fi
								;;
							o*)
								# occupied desktop
								FG=$COLOR_OCCUPIED_FG
								BG=$COLOR_OCCUPIED_BG
								UL=$BG
								;;
							O*)
								if [ "$on_focused_monitor" ] ; then
									# focused occupied desktop
									FG=$COLOR_FOCUSED_OCCUPIED_FG
									BG=$COLOR_FOCUSED_OCCUPIED_BG
									UL=$BG
								else
									# active occupied desktop
									FG=$COLOR_OCCUPIED_FG
									BG=$COLOR_OCCUPIED_BG
									UL=$COLOR_FOCUSED_OCCUPIED_BG
								fi
								;;
							u*)
								# urgent desktop
								FG=$COLOR_URGENT_FG
								BG=$COLOR_URGENT_BG
								UL=$BG
								;;
							U*)
								if [ "$on_focused_monitor" ] ; then
									# focused urgent desktop
									FG=$COLOR_FOCUSED_URGENT_FG
									BG=$COLOR_FOCUSED_URGENT_BG
									UL=$BG
								else
									# active urgent desktop
									FG=$COLOR_URGENT_FG
									BG=$COLOR_URGENT_BG
									UL=$COLOR_FOCUSED_URGENT_BG
								fi
								;;
						esac
						wm="${wm}%{F${FG}}%{B${BG}}%{A:bspc desktop -f ${name}:}%{A5:bspc desktop -f next:}%{A4:bspc desktop -f prev:} ${name} %{A}%{A}%{A}%{B-}%{F-}"
						;;
					[LTG]*)
						# layout, state and flags
						wm="${wm}%{F$COLOR_STATE_FG}%{B$COLOR_STATE_BG} ${name} %{B-}%{F-}"
						;;
				esac
				shift
			done
			;;
	esac
# 	printf "%s\n" "%{l}${wm} ${mpd_music} ${spotify_music} ${music} %{r}${mails} ${brightness} ${cpu} ${ram} ${wifi} ${volume} ${battery} ${date}"
	printf "%s\n" "%{l}${left_corner} ${wm} ${mpd_music} ${spotify_music} ${music} %{r}${mails} ${brightness} ${cpu} ${ram} ${wifi} ${volume} ${battery} ${date} ${right_corner}"
done
}

my_panel < "$PANEL_FIFO" | lemonbar -a 32 -u 2 -o -5 -n "$PANEL_WM_NAME" -g  \
1742x31+85+12 -B "$COLOR_TRANSPARENT" -f "$PANEL_FONT" -f "$ICONS_FONT" -f \
"$ICONS_FONT_2"  -F "$COLOR_DEFAULT_FG" | sh &

wid=$(xdo id -m -a "$PANEL_WM_NAME")
xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

wait
